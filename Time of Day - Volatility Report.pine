// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// ¬© sbtnc
// Created: 2023-02-23
// Last modified: 2025-02-19
// Version 2.0


//@version=6
indicator("Time of Day - Volatility Report", format = format.percent)


//--------------------------------------------------------------------
//#region                      Constants
//--------------------------------------------------------------------

color   COLUMN_BORDERCOLOR  = chart.bg_color
int     COLUMN_WIDTH        = 2
int     COLUMN_GAP          = 2
color   CAPTION_COLOR       = color.gray

//#endregion


//--------------------------------------------------------------------
//#region                         Types 
//--------------------------------------------------------------------

// @enum Contains fields with the complete UI list of timezones as titles.
enum Timezones
    utc  = "UTC"
    exch = "Exchange"
    cai  = "Africa/Cairo"
    jnb  = "Africa/Johannesburg"
    los  = "Africa/Lagos"
    nbo  = "Africa/Nairobi"
    tun  = "Africa/Tunis"
    bue  = "America/Argentina/Buenos_Aires"
    bog  = "America/Bogota"
    ccs  = "America/Caracas"
    chi  = "America/Chicago"
    den  = "America/Denver"
    esr  = "America/El_Salvador"
    jnu  = "America/Juneau"
    lim  = "America/Lima"
    lax  = "America/Los_Angeles"
    nyc  = "America/New_York"
    mex  = "America/Mexico_City"
    phx  = "America/Phoenix"
    scl  = "America/Santiago"
    sao  = "America/Sao_Paulo"
    yto  = "America/Toronto"
    yvr  = "America/Vancouver"
    ala  = "Asia/Almaty"
    asb  = "Asia/Ashgabat"
    bah  = "Asia/Bahrain"
    bkk  = "Asia/Bangkok"
    dxb  = "Asia/Dubai"
    ckg  = "Asia/Chongqing"
    cmb  = "Asia/Colombo"
    sgn  = "Asia/Ho_Chi_Minh"
    hkg  = "Asia/Hong_Kong"
    ist  = "Asia/Istanbul"
    jkt  = "Asia/Jakarta"
    jrs  = "Asia/Jerusalem"
    khi  = "Asia/Karachi"
    ktm  = "Asia/Kathmandu"
    ccu  = "Asia/Kolkata"
    kwi  = "Asia/Kuwait"
    mnl  = "Asia/Manila"
    mct  = "Asia/Muscat"
    nic  = "Asia/Nicosia"
    doh  = "Asia/Qatar"
    ruh  = "Asia/Riyadh"
    sel  = "Asia/Seoul"
    sha  = "Asia/Shanghai"
    sin  = "Asia/Singapore"
    tpe  = "Asia/Taipei"
    thr  = "Asia/Tehran"
    tyo  = "Asia/Tokyo"
    rgn  = "Asia/Yangon"
    rek  = "Atlantic/Reykjavik"
    adl  = "Australia/Adelaide"
    bne  = "Australia/Brisbane"
    per  = "Australia/Perth"
    syd  = "Australia/Sydney"
    ams  = "Europe/Amsterdam"
    ath  = "Europe/Athens"
    beg  = "Europe/Belgrade"
    ber  = "Europe/Berlin"
    bts  = "Europe/Bratislava"
    bru  = "Europe/Brussels"
    buh  = "Europe/Bucharest"
    bud  = "Europe/Budapest"
    cph  = "Europe/Copenhagen"
    dub  = "Europe/Dublin"
    hel  = "Europe/Helsinki"
    mad  = "Europe/Madrid"
    mla  = "Europe/Malta"
    mow  = "Europe/Moscow"
    lis  = "Europe/Lisbon"
    lon  = "Europe/London"
    lux  = "Europe/Luxembourg"
    osl  = "Europe/Oslo"
    par  = "Europe/Paris"
    rix  = "Europe/Riga"
    rom  = "Europe/Rome"
    sto  = "Europe/Stockholm"
    tll  = "Europe/Tallinn"
    vno  = "Europe/Vilnius"
    waw  = "Europe/Warsaw"
    zrh  = "Europe/Zurich"
    akl  = "Pacific/Auckland"
    cht  = "Pacific/Chatham"
    fko  = "Pacific/Fakaofo"
    hnl  = "Pacific/Honolulu"
    nlk  = "Pacific/Norfolk"

//#endregion


//--------------------------------------------------------------------
//#region                        Inputs
//--------------------------------------------------------------------

// Tooltips.

string  timezoneTooltip     = "Exchange and geographical time zones can observe Daylight Saving Time (DST)."
string  atrPeriodTooltip    = "By default, compares the hourly volatility relatively to the average daily volatility of the past 20 days."
string  outputTooltip       = "Mean: the average of all values in the dataset.\nMedian: the middle value in the ordered dataset."
string  noticeTitle         = "Navigate to the 1-hour timeframe (30-minute timeframe if the market starts at ùë•:30 AM or " +
                              "15-minute timeframe if ùë•:15 AM) for the indicator to analyze the bars and collect the volatility."

// Inputs by groups.

string      group1 = "Report"
string      group2 = "Style"
string      group3 = "How To Use?"

Timezones   timezoneInput             = input.enum    (Timezones.exch,              title = "Timezone", group = group1, tooltip = timezoneTooltip)
int         atrPeriodInput            = input.int     (20,                          title = "Daily ATR Period", group = group1, minval = 1, tooltip = atrPeriodTooltip)
string      outputInput               = input.string  ("Median",                    title = "Ouput", group = group1, options = ["Mean", "Median"], tooltip = outputTooltip)
int         startDateInput            = input.time    (timestamp("01 Jan 1975"),    title = "From", group = group1)
int         endDateInput              = input.time    (timestamp("31 Dec 2050"),    title = "To", group = group1)
color       highVolatilityColorInput  = input.color   (color.red,                   title = "High Volatility", group = group2)
color       lowVolatilityColorInput   = input.color   (color.blue,                  title = "Low Volatility", group = group2)
bool        noticeInput               = input.bool    (true,                        title = noticeTitle, group = group3, confirm = true, display = display.none)

//#endregion


//--------------------------------------------------------------------
//#region                 Variables declarations
//--------------------------------------------------------------------

var array<float> resultArray    = array.new_float(24)
var array<float> sizeArray      = array.new_float(24)
var array<float> datasetArray0  = array.new_float()
var array<float> datasetArray1  = array.new_float()
var array<float> datasetArray2  = array.new_float()
var array<float> datasetArray3  = array.new_float()
var array<float> datasetArray4  = array.new_float()
var array<float> datasetArray5  = array.new_float()
var array<float> datasetArray6  = array.new_float()
var array<float> datasetArray7  = array.new_float()
var array<float> datasetArray8  = array.new_float()
var array<float> datasetArray9  = array.new_float()
var array<float> datasetArray10 = array.new_float()
var array<float> datasetArray11 = array.new_float()
var array<float> datasetArray12 = array.new_float()
var array<float> datasetArray13 = array.new_float()
var array<float> datasetArray14 = array.new_float()
var array<float> datasetArray15 = array.new_float()
var array<float> datasetArray16 = array.new_float()
var array<float> datasetArray17 = array.new_float()
var array<float> datasetArray18 = array.new_float()
var array<float> datasetArray19 = array.new_float()
var array<float> datasetArray20 = array.new_float()
var array<float> datasetArray21 = array.new_float()
var array<float> datasetArray22 = array.new_float()
var array<float> datasetArray23 = array.new_float()

//#endregion


//--------------------------------------------------------------------
//#region                   Functions & methods
//--------------------------------------------------------------------

// @function Produce the `timezone` parameter from the user input.
// @returns  (string) Timezone
getTimezone() =>
    switch timezoneInput
        Timezones.utc  => "UTC+0"
        Timezones.exch => syminfo.timezone
        =>                str.tostring(timezoneInput)


// @function Check if the current bar time is in the user inputs range.
// @returns  bool
isInTimeRange() =>
    time >= startDateInput and time <= endDateInput


// @function Check if current bar time is at a given hour.
// @returns  bool
checkTime(int h) =>
    var string _tz = getTimezone()
    hour(time, _tz) == h


// @function Get the output data based on the input settings
// @returns  float
getData(array<float> data) =>
    switch outputInput
        "Mean"      => data.avg()
        "Median"    => data.median()


// @function Draw a chart column
// @returns  void
drawColumn(int _index) =>
    var box _col            = box.new(na, na, na, na, COLUMN_BORDERCOLOR)
    var label _legend       = label.new(na, na, color=color(na), style=label.style_label_up)
    var label _value        = label.new(na, na, color=color(na), style=label.style_label_down)
    var _gridMultiplier     = COLUMN_WIDTH + COLUMN_GAP 
    
    if barstate.islast
        _hasValue           = not na(array.get(resultArray, _index))
        _y                  = _hasValue ? array.get(resultArray, _index) : 0.0
        _x1                 = bar_index + (_index - 24) * _gridMultiplier
        _x2                 = _x1 + COLUMN_WIDTH
        _center             = _x1 + COLUMN_WIDTH / 2       
        _min                = array.min(resultArray)
        _max                = array.max(resultArray)
        _color              = color.from_gradient(_y, _min, _max, lowVolatilityColorInput, highVolatilityColorInput)
        _samples            = array.get(sizeArray, _index)


        // Column

        box.set_lefttop     (_col, _x1, _y)
        box.set_rightbottom (_col, _x2, 0)
        box.set_bgcolor     (_col, _color)


        // Legend

        label.set_xy        (_legend, _center, 0)
        label.set_text      (_legend, str.tostring(_index))
        label.set_textcolor (_legend, _color)
        label.set_tooltip   (_legend, str.format("{0}:00 to {0}:59 ({1})", _index, getTimezone()))


        // Value

        if _hasValue
            label.set_xy        (_value, _center, _y)
            label.set_text      (_value, str.tostring(math.round(_y)))
            label.set_textcolor (_value, _color)
            label.set_tooltip   (_value, str.format("{0} based on {1} samples", str.tostring(_y, format.percent), _samples))

//#endregion


//--------------------------------------------------------------------
//#region                         Logic
//--------------------------------------------------------------------

// Throw an error when the script is not on a suitable timeframe.
if not (timeframe.isminutes and timeframe.multiplier == 60)
    runtime.error("The report need to compute data from the hourly timeframe. Please change to 60 or 1H timeframe.")

// @variable Is true when the current bar is inside the time range filter.
bool isInRange = isInTimeRange()

// @variable The daily volatility.
float dailyAtr = request.security("", "D", ta.atr(atrPeriodInput))

// @variable The bar volatility.
float relativeToAtr = ta.tr * 100 / dailyAtr


// Collect the volatility data.

if isInRange
    switch
        checkTime(0)  => datasetArray0.push(relativeToAtr)
        checkTime(1)  => datasetArray1.push(relativeToAtr)
        checkTime(2)  => datasetArray2.push(relativeToAtr)
        checkTime(3)  => datasetArray3.push(relativeToAtr)
        checkTime(4)  => datasetArray4.push(relativeToAtr)
        checkTime(5)  => datasetArray5.push(relativeToAtr)
        checkTime(6)  => datasetArray6.push(relativeToAtr)
        checkTime(7)  => datasetArray7.push(relativeToAtr)
        checkTime(8)  => datasetArray8.push(relativeToAtr)
        checkTime(9)  => datasetArray9.push(relativeToAtr)
        checkTime(10) => datasetArray10.push(relativeToAtr)
        checkTime(11) => datasetArray11.push(relativeToAtr)
        checkTime(12) => datasetArray12.push(relativeToAtr)
        checkTime(13) => datasetArray13.push(relativeToAtr)
        checkTime(14) => datasetArray14.push(relativeToAtr)
        checkTime(15) => datasetArray15.push(relativeToAtr)
        checkTime(16) => datasetArray16.push(relativeToAtr)
        checkTime(17) => datasetArray17.push(relativeToAtr)
        checkTime(18) => datasetArray18.push(relativeToAtr)
        checkTime(19) => datasetArray19.push(relativeToAtr)
        checkTime(20) => datasetArray20.push(relativeToAtr)
        checkTime(21) => datasetArray21.push(relativeToAtr)
        checkTime(22) => datasetArray22.push(relativeToAtr)
        checkTime(23) => datasetArray23.push(relativeToAtr)


// Runs on the last bar for optimal performances.

if barstate.islast

    // Compute and store the results.

    resultArray.set(0,  getData(datasetArray0))
    resultArray.set(1,  getData(datasetArray1))
    resultArray.set(2,  getData(datasetArray2))
    resultArray.set(3,  getData(datasetArray3))
    resultArray.set(4,  getData(datasetArray4))
    resultArray.set(5,  getData(datasetArray5))
    resultArray.set(6,  getData(datasetArray6))
    resultArray.set(7,  getData(datasetArray7))
    resultArray.set(8,  getData(datasetArray8))
    resultArray.set(9,  getData(datasetArray9))
    resultArray.set(10, getData(datasetArray10))
    resultArray.set(11, getData(datasetArray11))
    resultArray.set(12, getData(datasetArray12))
    resultArray.set(13, getData(datasetArray13))
    resultArray.set(14, getData(datasetArray14))
    resultArray.set(15, getData(datasetArray15))
    resultArray.set(16, getData(datasetArray16))
    resultArray.set(17, getData(datasetArray17))
    resultArray.set(18, getData(datasetArray18))
    resultArray.set(19, getData(datasetArray19))
    resultArray.set(20, getData(datasetArray20))
    resultArray.set(21, getData(datasetArray21))
    resultArray.set(22, getData(datasetArray22))
    resultArray.set(23, getData(datasetArray23))


    // Store the sample sizes.

    sizeArray.set(0,  datasetArray0.size())
    sizeArray.set(1,  datasetArray1.size())
    sizeArray.set(2,  datasetArray2.size())
    sizeArray.set(3,  datasetArray3.size())
    sizeArray.set(4,  datasetArray4.size())
    sizeArray.set(5,  datasetArray5.size())
    sizeArray.set(6,  datasetArray6.size())
    sizeArray.set(7,  datasetArray7.size())
    sizeArray.set(8,  datasetArray8.size())
    sizeArray.set(9,  datasetArray9.size())
    sizeArray.set(10, datasetArray10.size())
    sizeArray.set(11, datasetArray11.size())
    sizeArray.set(12, datasetArray12.size())
    sizeArray.set(13, datasetArray13.size())
    sizeArray.set(14, datasetArray14.size())
    sizeArray.set(15, datasetArray15.size())
    sizeArray.set(16, datasetArray16.size())
    sizeArray.set(17, datasetArray17.size())
    sizeArray.set(18, datasetArray18.size())
    sizeArray.set(19, datasetArray19.size())
    sizeArray.set(20, datasetArray20.size())
    sizeArray.set(21, datasetArray21.size())
    sizeArray.set(22, datasetArray22.size())
    sizeArray.set(23, datasetArray23.size())

//#endregion


//--------------------------------------------------------------------
//#region                        Visuals
//--------------------------------------------------------------------

// Draw the column chart.

drawColumn(0)
drawColumn(1)
drawColumn(2)
drawColumn(3)
drawColumn(4)
drawColumn(5)
drawColumn(6)
drawColumn(7)
drawColumn(8)
drawColumn(9)
drawColumn(10)
drawColumn(11)
drawColumn(12)
drawColumn(13)
drawColumn(14)
drawColumn(15)
drawColumn(16)
drawColumn(17)
drawColumn(18)
drawColumn(19)
drawColumn(20)
drawColumn(21)
drawColumn(22)
drawColumn(23)

//#endregion