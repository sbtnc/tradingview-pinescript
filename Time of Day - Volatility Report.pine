// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// Â© sbtnc
// Created: 2023-02-23
// Last modified: 2025-02-19
// Version 2.0


//@version=6
indicator("Time of Day - Volatility Report", format = format.percent)


//--------------------------------------------------------------------
//                             Constants
//--------------------------------------------------------------------

color   COLUMN_BORDERCOLOR  = chart.bg_color
int     COLUMN_WIDTH        = 2
int     COLUMN_GAP          = 2
color   CAPTION_COLOR       = color.gray


//--------------------------------------------------------------------
//                               Inputs
//--------------------------------------------------------------------

string  timezoneTooltip     = "Exchange and geographical time zones can observe Daylight Saving Time (DST)."
string  atrPeriodTooltip    = "By default, compares the hourly volatility relatively to the average daily volatility of the past 20 days."
string  outputTooltip       = "Mean: the average of all values in the dataset.\nMedian: the middle value in the ordered dataset."

string  timezoneInput       = input.string  ("Exchange",
     title = "Timezone",
     options = [
     "UTC",
     "Exchange",
     "Africa/Cairo",
     "Africa/Johannesburg",
     "Africa/Lagos",
     "Africa/Nairobi",
     "Africa/Tunis",
     "America/Argentina/Buenos_Aires",
     "America/Bogota",
     "America/Caracas",
     "America/Chicago",
     "America/Denver",
     "America/El_Salvador",
     "America/Juneau",
     "America/Lima",
     "America/Los_Angeles",
     "America/New_York",
     "America/Mexico_City",
     "America/Phoenix",
     "America/Santiago",
     "America/Sao_Paulo",
     "America/Toronto",
     "America/Vancouver",
     "Asia/Almaty",
     "Asia/Ashgabat",
     "Asia/Bahrain",
     "Asia/Bangkok",
     "Asia/Dubai",
     "Asia/Chongqing",
     "Asia/Colombo",
     "Asia/Ho_Chi_Minh",
     "Asia/Hong_Kong",
     "Asia/Istanbul",
     "Asia/Jakarta",
     "Asia/Jerusalem",
     "Asia/Karachi",
     "Asia/Kathmandu",
     "Asia/Kolkata",
     "Asia/Kuwait",
     "Asia/Manila",
     "Asia/Muscat",
     "Asia/Nicosia",
     "Asia/Qatar",
     "Asia/Riyadh",
     "Asia/Seoul",
     "Asia/Shanghai",
     "Asia/Singapore",
     "Asia/Taipei",
     "Asia/Tehran",
     "Asia/Tokyo",
     "Asia/Yangon",
     "Atlantic/Reykjavik",
     "Australia/Adelaide",
     "Australia/Brisbane",
     "Australia/Perth",
     "Australia/Sydney",
     "Europe/Amsterdam",
     "Europe/Athens",
     "Europe/Belgrade",
     "Europe/Berlin",
     "Europe/Bratislava",
     "Europe/Brussels",
     "Europe/Bucharest",
     "Europe/Budapest",
     "Europe/Copenhagen",
     "Europe/Dublin",
     "Europe/Helsinki",
     "Europe/Madrid",
     "Europe/Malta",
     "Europe/Moscow",
     "Europe/Lisbon",
     "Europe/London",
     "Europe/Luxembourg",
     "Europe/Oslo",
     "Europe/Paris",
     "Europe/Riga",
     "Europe/Rome",
     "Europe/Stockholm",
     "Europe/Tallinn",
     "Europe/Vilnius",
     "Europe/Warsaw",
     "Europe/Zurich",
     "Pacific/Auckland",
     "Pacific/Chatham",
     "Pacific/Fakaofo",
     "Pacific/Honolulu",
     "Pacific/Norfolk"
     ],
     tooltip = timezoneTooltip
 )
int     atrPeriodInput              = input.int     (20,                        title = "Daily ATR Period", minval = 1, tooltip = atrPeriodTooltip)
string  outputInput                 = input.string  ("Median",                  title = "Ouput",            options = ["Mean", "Median"], tooltip = outputTooltip)
color   highVolatilityColorInput    = input.color   (color.red,                 title = "High Volatility")
color   lowVolatilityColorInput     = input.color   (color.blue,                title = "Low Volatility")
int     startDateInput              = input.time    (timestamp("01 Jan 1975"),  title = "From")
int     endDateInput                = input.time    (timestamp("31 Dec 2050"),  title = "To")


//--------------------------------------------------------------------
//                        Variables declarations
//--------------------------------------------------------------------

var array<float> resultArray    = array.new_float(24)
var array<float> sizeArray      = array.new_float(24)
var array<float> datasetArray0  = array.new_float()
var array<float> datasetArray1  = array.new_float()
var array<float> datasetArray2  = array.new_float()
var array<float> datasetArray3  = array.new_float()
var array<float> datasetArray4  = array.new_float()
var array<float> datasetArray5  = array.new_float()
var array<float> datasetArray6  = array.new_float()
var array<float> datasetArray7  = array.new_float()
var array<float> datasetArray8  = array.new_float()
var array<float> datasetArray9  = array.new_float()
var array<float> datasetArray10 = array.new_float()
var array<float> datasetArray11 = array.new_float()
var array<float> datasetArray12 = array.new_float()
var array<float> datasetArray13 = array.new_float()
var array<float> datasetArray14 = array.new_float()
var array<float> datasetArray15 = array.new_float()
var array<float> datasetArray16 = array.new_float()
var array<float> datasetArray17 = array.new_float()
var array<float> datasetArray18 = array.new_float()
var array<float> datasetArray19 = array.new_float()
var array<float> datasetArray20 = array.new_float()
var array<float> datasetArray21 = array.new_float()
var array<float> datasetArray22 = array.new_float()
var array<float> datasetArray23 = array.new_float()


//--------------------------------------------------------------------
//                              Functions 
//--------------------------------------------------------------------

// @function Get the time zone from the input settings
// @return string
f_getTimezone() => 
    switch timezoneInput
        "UTC"       => "UTC+0"
        "Exchange"  => syminfo.timezone  
        => timezoneInput


// @function Check if the current bar time is in the user-selected time range filter.
// @returns  bool
isInTimeRange() =>
    time >= startDateInput and time <= endDateInput


// @function Check if current bar's time is at a given hour
// @return bool
f_checkTime(int _hour) =>
    var _tz = f_getTimezone()
    hour(time, _tz) == _hour


// @function Get the output data based on the input settings
// @return float
f_getData(array<float> data) =>
    switch outputInput
        "Mean"                  => array.avg(data)
        "Median"                => array.median(data)


// @function Draw a chart column
// @return void
f_drawColumn(int _index) =>
    var box _col            = box.new(na, na, na, na, COLUMN_BORDERCOLOR)
    var label _legend       = label.new(na, na, color=color(na), style=label.style_label_up)
    var label _value        = label.new(na, na, color=color(na), style=label.style_label_down)
    var _gridMultiplier     = COLUMN_WIDTH + COLUMN_GAP 
    
    if barstate.islast
        _hasValue           = not na(array.get(resultArray, _index))
        _y                  = _hasValue ? array.get(resultArray, _index) : 0.0
        _x1                 = bar_index + (_index - 24) * _gridMultiplier
        _x2                 = _x1 + COLUMN_WIDTH
        _center             = _x1 + COLUMN_WIDTH / 2       
        _min                = array.min(resultArray)
        _max                = array.max(resultArray)
        _color              = color.from_gradient(_y, _min, _max, lowVolatilityColorInput, highVolatilityColorInput)
        _samples            = array.get(sizeArray, _index)


        // Column

        box.set_lefttop     (_col, _x1, _y)
        box.set_rightbottom (_col, _x2, 0)
        box.set_bgcolor     (_col, _color)


        // Legend

        label.set_xy        (_legend, _center, 0)
        label.set_text      (_legend, str.tostring(_index))
        label.set_textcolor (_legend, _color)
        label.set_tooltip   (_legend, str.format("{0}:00 to {0}:59 ({1})", _index, f_getTimezone()))


        // Value

        if _hasValue
            label.set_xy        (_value, _center, _y)
            label.set_text      (_value, str.tostring(math.round(_y)))
            label.set_textcolor (_value, _color)
            label.set_tooltip   (_value, str.format("{0} based on {1} samples", str.tostring(_y, format.percent), _samples))


//--------------------------------------------------------------------
//                                Logic
//--------------------------------------------------------------------


if not (timeframe.isminutes and timeframe.multiplier == 60)
    runtime.error("The report need to compute data from the hourly timeframe. Please change to 60 or 1H timeframe.")

//@variable Is true when the current bar is inside the time range filter.
isInRange = isInTimeRange()

dailyAtr        = request.security(syminfo.tickerid, "D", ta.atr(atrPeriodInput))
relativeToAtr   = ta.tr * 100 / dailyAtr


// Collect the volatility data

if isInRange
    switch
        f_checkTime(0)  => array.push(datasetArray0,   relativeToAtr)
        f_checkTime(1)  => array.push(datasetArray1,   relativeToAtr)
        f_checkTime(2)  => array.push(datasetArray2,   relativeToAtr)
        f_checkTime(3)  => array.push(datasetArray3,   relativeToAtr)
        f_checkTime(4)  => array.push(datasetArray4,   relativeToAtr)
        f_checkTime(5)  => array.push(datasetArray5,   relativeToAtr)
        f_checkTime(6)  => array.push(datasetArray6,   relativeToAtr)
        f_checkTime(7)  => array.push(datasetArray7,   relativeToAtr)
        f_checkTime(8)  => array.push(datasetArray8,   relativeToAtr)
        f_checkTime(9)  => array.push(datasetArray9,   relativeToAtr)
        f_checkTime(10) => array.push(datasetArray10,  relativeToAtr)
        f_checkTime(11) => array.push(datasetArray11,  relativeToAtr)
        f_checkTime(12) => array.push(datasetArray12,  relativeToAtr)
        f_checkTime(13) => array.push(datasetArray13,  relativeToAtr)
        f_checkTime(14) => array.push(datasetArray14,  relativeToAtr)
        f_checkTime(15) => array.push(datasetArray15,  relativeToAtr)
        f_checkTime(16) => array.push(datasetArray16,  relativeToAtr)
        f_checkTime(17) => array.push(datasetArray17,  relativeToAtr)
        f_checkTime(18) => array.push(datasetArray18,  relativeToAtr)
        f_checkTime(19) => array.push(datasetArray19,  relativeToAtr)
        f_checkTime(20) => array.push(datasetArray20,  relativeToAtr)
        f_checkTime(21) => array.push(datasetArray21,  relativeToAtr)
        f_checkTime(22) => array.push(datasetArray22,  relativeToAtr)
        f_checkTime(23) => array.push(datasetArray23,  relativeToAtr)


// Compute on last bar for optimizing performances

if barstate.islast

    // The results

    array.set(resultArray, 0,  f_getData(datasetArray0))
    array.set(resultArray, 1,  f_getData(datasetArray1))
    array.set(resultArray, 2,  f_getData(datasetArray2))
    array.set(resultArray, 3,  f_getData(datasetArray3))
    array.set(resultArray, 4,  f_getData(datasetArray4))
    array.set(resultArray, 5,  f_getData(datasetArray5))
    array.set(resultArray, 6,  f_getData(datasetArray6))
    array.set(resultArray, 7,  f_getData(datasetArray7))
    array.set(resultArray, 8,  f_getData(datasetArray8))
    array.set(resultArray, 9,  f_getData(datasetArray9))
    array.set(resultArray, 10, f_getData(datasetArray10))
    array.set(resultArray, 11, f_getData(datasetArray11))
    array.set(resultArray, 12, f_getData(datasetArray12))
    array.set(resultArray, 13, f_getData(datasetArray13))
    array.set(resultArray, 14, f_getData(datasetArray14))
    array.set(resultArray, 15, f_getData(datasetArray15))
    array.set(resultArray, 16, f_getData(datasetArray16))
    array.set(resultArray, 17, f_getData(datasetArray17))
    array.set(resultArray, 18, f_getData(datasetArray18))
    array.set(resultArray, 19, f_getData(datasetArray19))
    array.set(resultArray, 20, f_getData(datasetArray20))
    array.set(resultArray, 21, f_getData(datasetArray21))
    array.set(resultArray, 22, f_getData(datasetArray22))
    array.set(resultArray, 23, f_getData(datasetArray23))


    // The sample sizes

    array.set(sizeArray, 0,  array.size(datasetArray0))
    array.set(sizeArray, 1,  array.size(datasetArray1))
    array.set(sizeArray, 2,  array.size(datasetArray2))
    array.set(sizeArray, 3,  array.size(datasetArray3))
    array.set(sizeArray, 4,  array.size(datasetArray4))
    array.set(sizeArray, 5,  array.size(datasetArray5))
    array.set(sizeArray, 6,  array.size(datasetArray6))
    array.set(sizeArray, 7,  array.size(datasetArray7))
    array.set(sizeArray, 8,  array.size(datasetArray8))
    array.set(sizeArray, 9,  array.size(datasetArray9))
    array.set(sizeArray, 10, array.size(datasetArray10))
    array.set(sizeArray, 11, array.size(datasetArray11))
    array.set(sizeArray, 12, array.size(datasetArray12))
    array.set(sizeArray, 13, array.size(datasetArray13))
    array.set(sizeArray, 14, array.size(datasetArray14))
    array.set(sizeArray, 15, array.size(datasetArray15))
    array.set(sizeArray, 16, array.size(datasetArray16))
    array.set(sizeArray, 17, array.size(datasetArray17))
    array.set(sizeArray, 18, array.size(datasetArray18))
    array.set(sizeArray, 19, array.size(datasetArray19))
    array.set(sizeArray, 20, array.size(datasetArray20))
    array.set(sizeArray, 21, array.size(datasetArray21))
    array.set(sizeArray, 22, array.size(datasetArray22))
    array.set(sizeArray, 23, array.size(datasetArray23))


//--------------------------------------------------------------------
//                          Plotting & styling
//--------------------------------------------------------------------

// Draw the column chart

f_drawColumn(0)
f_drawColumn(1)
f_drawColumn(2)
f_drawColumn(3)
f_drawColumn(4)
f_drawColumn(5)
f_drawColumn(6)
f_drawColumn(7)
f_drawColumn(8)
f_drawColumn(9)
f_drawColumn(10)
f_drawColumn(11)
f_drawColumn(12)
f_drawColumn(13)
f_drawColumn(14)
f_drawColumn(15)
f_drawColumn(16)
f_drawColumn(17)
f_drawColumn(18)
f_drawColumn(19)
f_drawColumn(20)
f_drawColumn(21)
f_drawColumn(22)
f_drawColumn(23)