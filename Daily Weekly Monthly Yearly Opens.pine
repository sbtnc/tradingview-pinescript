// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// Â© sbtnc
// Created: 2020-01-11
// Last modified: 2024-11-19
// version 6.0

// @version=5
indicator("Daily Weekly Monthly Yearly Opens", "DWMY O", true, max_lines_count=500)


//--------------------------------------------------------------------
//#region                      Constants
//--------------------------------------------------------------------

int     HEAD_PADDING    = -2
int     HEAD_TRANSP     = 60
string  LABEL_SIZE      = size.small
string  LABEL_STYLE     = label.style_none
string  LINE_STYLE      = line.style_solid
int     LINE_WIDTH      = 1
int     OFFSET_PADDING  = 4
string  TAIL_STYLE      = line.style_dotted
color   COLOR_1         = color.green
color   COLOR_2         = color.orange
color   COLOR_3         = color.red
color   COLOR_4         = color.blue

//#endregion


//--------------------------------------------------------------------
//#region                        Inputs
//--------------------------------------------------------------------

string  g1 = "Opens"
string  g2 = "Style"
string  g3 = "Preferences"

string  tailsTooltip                = "Extends last opens on historical bars."
string  headsTooltip                = "Extends previous opens in the future."
string  discoverPricesTooltip       = "Discovers the opening prices from the intraday chart.\n\nYou may use this setting when there are discrepancies between the data from intraday and high time frames."
string  extendedHoursTooltip        = "Discovers the opening prices from the extended trading hours if available."

bool    enableOpenInput1            = input.bool        (true,      title = "", group = g1, inline = "#1")
string  openTimeframeInput1         = input.timeframe   ("D",       title = "", group = g1, inline = "#1")
color   openColorInput1             = input.color       (COLOR_1,   title = "", group = g1, inline = "#1")
int     openLookbackInput1          = input.int         (1,         title = "", group = g1, inline = "#1", minval = 1)

bool    enableOpenInput2            = input.bool        (true,      title = "", group = g1, inline = "#2")
string  openTimeframeInput2         = input.timeframe   ("W",       title = "", group = g1, inline = "#2")
color   openColorInput2             = input.color       (COLOR_2,   title = "", group = g1, inline = "#2")
int     openLookbackInput2          = input.int         (1,         title = "", group = g1, inline = "#2", minval = 1)

bool    enableOpenInput3            = input.bool        (true,      title = "", group = g1, inline = "#3")
string  openTimeframeInput3         = input.timeframe   ("M",       title = "", group = g1, inline = "#3")
color   openColorInput3             = input.color       (COLOR_3,   title = "", group = g1, inline = "#3")
int     openLookbackInput3          = input.int         (1,         title = "", group = g1, inline = "#3", minval = 1)

bool    enableOpenInput4            = input.bool        (true,      title = "", group = g1, inline = "#4")
string  openTimeframeInput4         = input.timeframe   ("12M",     title = "", group = g1, inline = "#4")
color   openColorInput4             = input.color       (COLOR_4,   title = "", group = g1, inline = "#4")
int     openLookbackInput4          = input.int         (1,         title = "", group = g1, inline = "#4", minval = 1)

int     rightOffsetInput            = input.int         (20,        title = "Offset",           group = g2, minval = 1)
bool    enableTailsInput        = input.bool        (false,     title = "Show Tails",       group = g2, tooltip = tailsTooltip)
bool    enableHeadsInput        = input.bool        (false,     title = "Show Projections", group = g2, tooltip = headsTooltip)
bool    discoverPricesInput         = input.bool        (false,     title = "Discover Prices",  group = g3, tooltip = discoverPricesTooltip)
bool    enableExtendedSessionInput  = input.bool        (false,     title = "Extended Hours",   group = g3, tooltip = extendedHoursTooltip)

//#endregion


//--------------------------------------------------------------------
//#region                   Functions & methods
//--------------------------------------------------------------------

// @function Check if the specified open `timeframe` can be displayed on the chart context.
// @returns  simple bool
method isVisible(simple string timeframe) =>
    timeframe.in_seconds(timeframe) > timeframe.in_seconds()


// @function Check if the specified open change.
// @returns  series bool
method change(simple string timeframe, series int regularTime, simple bool enableExtended) =>
    switch enableExtended
        true  => timeframe.change(timeframe)
        false => ta.change(regularTime) > 0


// @function 
// @returns  
// On the weekly time frame, the monthly/yearly open is drawn from the first candle of the month/year
// The first weekly candle is not necessarily containing the first day of the month
// In such case, we visually anchor the open of the previous weekly candle
f_isContainedOnPrevWeekly(int _time) => timeframe.isweekly and dayofmonth(time) > dayofmonth(_time)


// @function 
// @returns  
f_getRightBarIndex(int _padding) => bar_index + rightOffsetInput + _padding * OFFSET_PADDING


// @function Create and update an open level. An open is composed of a label, a "body" line, and optional "tail" and "head" lines extensions.
// @returns  void
draw(bool change, float y, int lookback, int padding, color color, string txt, array<float> lastOpenArray, bool prevTime = false) =>
    // @variable The reference of the last open line.
    var line _bodyLine = na
    // @variable The reference of the last open label.
    var label _label = label.new(x = na, y = na, text = txt, style = LABEL_STYLE, textcolor = color, size = LABEL_SIZE)
    // @variable The reference of the last open left extending line.
    var line _tailLine = line.new(x1 = na, y1 = na, x2 = na, y2 = na, color = color, style = TAIL_STYLE, width = LINE_WIDTH, extend = extend.left)
    // @variable The collection of historical open lines.
    var array<line> _bodyLineArray  = array.new_line()
    // @variable The collection of historical right extending open lines.
    var array<line> _headLineArray  = array.new_line()

    int _startBarIndex  = prevTime ? bar_index - 1 : bar_index
    int _endBarIndex    = f_getRightBarIndex(padding)

    if change
        // Anchor the old open position.
        _bodyLine.set_x2(bar_index)

        // Update the last open label position and tooltip.
        _label.set_xy(_endBarIndex, y)
        _label.set_tooltip(str.tostring(y, format.mintick))

        // Create the last open line.
        _bodyLine := line.new(x1 = _startBarIndex, y1 = y, x2 = _endBarIndex, y2 = y, color = color, style = LINE_STYLE, width = LINE_WIDTH)
        array.push(_bodyLineArray, _bodyLine)

        // Create the last open right extension.
        if enableHeadsInput
            _headLineArray.push(line.new(x1 = bar_index, y1 = y, x2 = bar_index, y2 = y, color = color.new(color, HEAD_TRANSP), style = LINE_STYLE, width = LINE_WIDTH))

        // Create the last open left extension.
        if enableTailsInput
            _tailLine.set_xy1(_startBarIndex -1, y)
            _tailLine.set_xy2(_startBarIndex,    y)

        // Trim the exceeding number of drawings.
        if _bodyLineArray.size() > lookback
            line.delete(_bodyLineArray.shift())
        if _headLineArray.size() > lookback
            line.delete(_headLineArray.shift())

    if barstate.islast
        _bodyLine.set_x2(_endBarIndex)
        _label.set_x(_endBarIndex)

        if enableHeadsInput and _headLineArray.size() > 1
            // Not updating the last open's projection
            for i = 0 to _headLineArray.size() - 2
                // Avoid projecting on last opens bodies
                if not lastOpenArray.includes(_headLineArray.get(i).get_y1())
                    _headLineArray.get(i).set_x2(f_getRightBarIndex(HEAD_PADDING))


// @function 
// @returns 
// If different opens share the same opening prices, their labels will overlap
// Instead, we pad the higher time frame ones for achieving a "separator sheet"
f_getPadding(int _index, bool displayOpen1, bool displayOpen2, bool displayOpen3, array<float> lastOpenArray) =>
    _padding = 0
    // Weekly, monthly, or yearly overlaps the daily open
    if _index > 0 and displayOpen1 and array.get(lastOpenArray, 0) == array.get(lastOpenArray, _index)
        _padding += 1
    // Monthly or yearly overlaps the weekly open
    if _index > 1 and displayOpen2 and array.get(lastOpenArray, 1) == array.get(lastOpenArray, _index)
        _padding += 1
    // Yearly overlaps the monthly open
    if _index > 2 and displayOpen3 and array.get(lastOpenArray, 2) == array.get(lastOpenArray, _index)
        _padding += 1
    _padding

//#endregion



//--------------------------------------------------------------------
//#region                 Variables declarations
//--------------------------------------------------------------------

var array<float> lastOpenArray   = array.new_float(4)

// @variable True if using the open price of the extended session.
var bool useExtendedTradingHours = enableExtendedSessionInput and syminfo.session == session.extended

// @variable True if the open price is sourced from the chart context.
var bool discoverPrices = discoverPricesInput or useExtendedTradingHours

// @variable Is true if the display setting is enabled and chart timeframe is lower than the open's one.
var bool displayOpen1 = enableOpenInput1 and openTimeframeInput1.isVisible()
var bool displayOpen2 = enableOpenInput2 and openTimeframeInput2.isVisible()
var bool displayOpen3 = enableOpenInput3 and openTimeframeInput3.isVisible()
var bool displayOpen4 = enableOpenInput4 and openTimeframeInput4.isVisible()

// @variable The opening time and price sourced from the user-selected timeframe context.
[time1, open1] = request.security("", openTimeframeInput1, [time, open], lookahead=barmerge.lookahead_on)
[time2, open2] = request.security("", openTimeframeInput2, [time, open], lookahead=barmerge.lookahead_on)
[time3, open3] = request.security("", openTimeframeInput3, [time, open], lookahead=barmerge.lookahead_on)
[time4, open4] = request.security("", openTimeframeInput4, [time, open], lookahead=barmerge.lookahead_on)

//#endregion


//--------------------------------------------------------------------
//#region                         Logic
//--------------------------------------------------------------------

bool openChange1 = openTimeframeInput1.change(time1, useExtendedTradingHours)
bool openChange2 = openTimeframeInput2.change(time2, useExtendedTradingHours)
bool openChange3 = openTimeframeInput3.change(time3, useExtendedTradingHours)
bool openChange4 = openTimeframeInput4.change(time4, useExtendedTradingHours)


if displayOpen1 and openChange1 
    lastOpenArray.set(0, discoverPrices ? open : open1)

if displayOpen2 and openChange2
    lastOpenArray.set(1, discoverPrices ? open : open2)

if displayOpen3 and openChange3
    lastOpenArray.set(2, discoverPrices ? open : open3)

if displayOpen4 and openChange4
    lastOpenArray.set(3, discoverPrices ? open : open4)

//#endregion


//--------------------------------------------------------------------
//#region                        Visuals
//--------------------------------------------------------------------

if displayOpen4
    draw(
         openChange4,
         array.get(lastOpenArray, 3),
         openLookbackInput4,
         f_getPadding(3, displayOpen1, displayOpen2, displayOpen3, lastOpenArray),
         openColorInput4,
         "Y   ",
         lastOpenArray,
         f_isContainedOnPrevWeekly(time4)
         )

if displayOpen3
    draw(
         openChange3,
         array.get(lastOpenArray, 2),
         openLookbackInput3,
         f_getPadding(2, displayOpen1, displayOpen2, displayOpen3, lastOpenArray),
         openColorInput3,
         "M   ",
         lastOpenArray,
         f_isContainedOnPrevWeekly(time3)
         )

if displayOpen2
    draw(
         openChange2,
         array.get(lastOpenArray, 1),
         openLookbackInput2,
         f_getPadding(1, displayOpen1, displayOpen2, displayOpen3, lastOpenArray),
         openColorInput2,
         "W   ",
         lastOpenArray
         )

if displayOpen1
    draw(
         openChange1,
         array.get(lastOpenArray, 0),
         openLookbackInput1,
         f_getPadding(0, displayOpen1, displayOpen2, displayOpen3, lastOpenArray),
         openColorInput1,
         "D   ",
         lastOpenArray
         )


// Plot the open prices on the `status line`, `scale`, `data window` as well for providing default alert conditions.

displayControls = display.status_line + display.price_scale + display.data_window

plot(series = lastOpenArray.get(0), title = "#1", color = COLOR_1, editable = false, display = displayControls)
plot(series = lastOpenArray.get(1), title = "#2", color = COLOR_2, editable = false, display = displayControls)
plot(series = lastOpenArray.get(2), title = "#3", color = COLOR_3, editable = false, display = displayControls)
plot(series = lastOpenArray.get(3), title = "#4", color = COLOR_4, editable = false, display = displayControls)

//#endregion