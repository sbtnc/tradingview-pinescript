// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// Â© sbtnc
// Created: 2019-01-05
// Last modified: 2023-05-09
// Version 2.0

// @version=5
indicator("Multiple Moving Averages", "MAs", true)


//--------------------------------------------------------------------
//#region                      Constants
//--------------------------------------------------------------------

var DEFAULT_LINEWIDTH   = 1
var DEFAULT_COLOR1      = color.new(#c9daf8, 0)
var DEFAULT_COLOR2      = color.new(#a4c2f4, 4)
var DEFAULT_COLOR3      = color.new(#6d9eeb, 8)
var DEFAULT_COLOR4      = color.new(#3c78d8, 12)
var DEFAULT_COLOR5      = color.new(#0b5394, 16)

//#endregion


//--------------------------------------------------------------------
//#region                        Inputs
//--------------------------------------------------------------------

// Groups

g1 = "#1"
g2 = "#2"
g3 = "#3"
g4 = "#4"
g5 = "#5"
g6 = "Preferences"


// Tooltips

tt_timeframe    = "You can display a Moving Average from a higher timeframe. " +
                     "Note: It will be automatically hidden when switching the chart to a timeframe higher than its timeframe."


// Inputs

i_type_1        = input.string      ("EMA", "Type", ["SMA", "EMA", "SMMA (RMA)", "WMA", "VWMA"],    group=g1)
i_length1       = input.int         (9,     "Length", 1,                                            group=g1)
i_source1       = input             (close, "Source",                                               group=g1)
i_offset1       = input.int         (0,     "Offset",                                               group=g1)
i_timeframe1    = input.timeframe   ("",    "Timeframe", tooltip=tt_timeframe,                      group=g1)

i_type_2        = input.string      ("EMA", "Type", ["SMA", "EMA", "SMMA (RMA)", "WMA", "VWMA"],    group=g2)
i_length2       = input.int         (20,    "Length", 1,                                            group=g2)
i_source2       = input             (close, "Source",                                               group=g2)
i_offset2       = input.int         (0,     "Offset",                                               group=g2)
i_timeframe2    = input.timeframe   ("",    "Timeframe", tooltip=tt_timeframe,                      group=g2)

i_type_3        = input.string      ("EMA", "Type", ["SMA", "EMA", "SMMA (RMA)", "WMA", "VWMA"],    group=g3)
i_length3       = input.int         (50,    "Length", 1,                                            group=g3)
i_source3       = input             (close, "Source",                                               group=g3)
i_offset3       = input.int         (0,     "Offset",                                               group=g3)
i_timeframe3    = input.timeframe   ("",    "Timeframe", tooltip=tt_timeframe,                      group=g3)

i_type_4        = input.string      ("EMA", "Type", ["SMA", "EMA", "SMMA (RMA)", "WMA", "VWMA"],    group=g4)
i_length4       = input.int         (100,   "Length", 1,                                            group=g4)
i_source4       = input             (close, "Source",                                               group=g4)
i_offset4       = input.int         (0,     "Offset",                                               group=g4)
i_timeframe4    = input.timeframe   ("",    "Timeframe", tooltip=tt_timeframe,                      group=g4)

i_type_5        = input.string      ("EMA", "Type", ["SMA", "EMA", "SMMA (RMA)", "WMA", "VWMA"],    group=g5)
i_length5       = input.int         (200,   "Length", 1,                                            group=g5)
i_source5       = input             (close, "Source",                                               group=g5)
i_offset5       = input.int         (0,     "Offset",                                               group=g5)
i_timeframe5    = input.timeframe   ("",    "Timeframe", tooltip=tt_timeframe,                      group=g5)

i_enableGaps    = input             (true,  "Wait for timeframe closes",                            group=g6)

//#endregion


//--------------------------------------------------------------------
//#region                       Functions 
//--------------------------------------------------------------------

// @function Get the Moving Average (MA)
// @returns float
f_getMa(string _type, float _source, _length) =>
    switch _type
        "SMA"           => ta.sma(_source, _length)
        "EMA"           => ta.ema(_source, _length)
        "SMMA (RMA)"    => ta.rma(_source, _length)
        "WMA"           => ta.wma(_source, _length)
        "VWMA"          => ta.vwma(_source, _length)


// @function Check if a timeframe is higher or equal than the chart's one
// @returns bool
f_canDisplay(_tf) =>
    timeframe.in_seconds(_tf) >= timeframe.in_seconds()

//#endregion


//--------------------------------------------------------------------
//#region                         Logic
//--------------------------------------------------------------------

var gaps = i_enableGaps ? barmerge.gaps_on : barmerge.gaps_off

ma1 = request.security(syminfo.tickerid, i_timeframe1, f_getMa(i_type_1, i_source1, i_length1), gaps=gaps)
ma2 = request.security(syminfo.tickerid, i_timeframe2, f_getMa(i_type_2, i_source2, i_length2), gaps=gaps)
ma3 = request.security(syminfo.tickerid, i_timeframe3, f_getMa(i_type_3, i_source3, i_length3), gaps=gaps)
ma4 = request.security(syminfo.tickerid, i_timeframe4, f_getMa(i_type_4, i_source4, i_length4), gaps=gaps)
ma5 = request.security(syminfo.tickerid, i_timeframe5, f_getMa(i_type_5, i_source5, i_length5), gaps=gaps)

//#endregion


//--------------------------------------------------------------------
//#region                   Plotting & styling
//--------------------------------------------------------------------

plot(f_canDisplay(i_timeframe1) ? ma1 : na, "#1", DEFAULT_COLOR1, DEFAULT_LINEWIDTH, offset=i_offset1)
plot(f_canDisplay(i_timeframe2) ? ma2 : na, "#2", DEFAULT_COLOR2, DEFAULT_LINEWIDTH, offset=i_offset2)
plot(f_canDisplay(i_timeframe3) ? ma3 : na, "#3", DEFAULT_COLOR3, DEFAULT_LINEWIDTH, offset=i_offset3)
plot(f_canDisplay(i_timeframe4) ? ma4 : na, "#4", DEFAULT_COLOR4, DEFAULT_LINEWIDTH, offset=i_offset4)
plot(f_canDisplay(i_timeframe5) ? ma5 : na, "#5", DEFAULT_COLOR5, DEFAULT_LINEWIDTH, offset=i_offset5)

//#endregion